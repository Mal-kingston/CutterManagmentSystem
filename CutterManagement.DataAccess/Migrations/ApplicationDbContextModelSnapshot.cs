// <auto-generated />
using System;
using CutterManagement.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CutterManagement.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CutterManagement.Core.CutterDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("CutterNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cutters");
                });

            modelBuilder.Entity("CutterManagement.Core.MachineDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("CutterChangeComment")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CutterChangeInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrequencyCheckResult")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MachineNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MachineSetId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartToothSize")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatusMessage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("CutterManagement.Core.MachineDataModelCutterDataModel", b =>
                {
                    b.Property<int>("MachineDataModelId")
                        .HasColumnType("int");

                    b.Property<int>("CutterDataModelId")
                        .HasColumnType("int");

                    b.HasKey("MachineDataModelId", "CutterDataModelId");

                    b.HasIndex("CutterDataModelId");

                    b.ToTable("MachineDataModelCutterDataModels");
                });

            modelBuilder.Entity("CutterManagement.Core.MachineDataModelPartDataModel", b =>
                {
                    b.Property<int>("MachineDataModelId")
                        .HasColumnType("int");

                    b.Property<int>("PartDataModelId")
                        .HasColumnType("int");

                    b.HasKey("MachineDataModelId", "PartDataModelId");

                    b.HasIndex("PartDataModelId");

                    b.ToTable("MachineDataModelPartDataModels");
                });

            modelBuilder.Entity("CutterManagement.Core.MachineDataModelUserDataModel", b =>
                {
                    b.Property<int>("MachineDataModelId")
                        .HasColumnType("int");

                    b.Property<int>("UserDataModelId")
                        .HasColumnType("int");

                    b.HasKey("MachineDataModelId", "UserDataModelId");

                    b.HasIndex("UserDataModelId");

                    b.ToTable("MachineDataModelUserDataModels");
                });

            modelBuilder.Entity("CutterManagement.Core.PartDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartToothCount")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("CutterManagement.Core.UserDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CutterManagement.Core.MachineDataModelCutterDataModel", b =>
                {
                    b.HasOne("CutterManagement.Core.CutterDataModel", "CutterDataModel")
                        .WithMany("MachinesAndCutters")
                        .HasForeignKey("CutterDataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CutterManagement.Core.MachineDataModel", "MachineDataModel")
                        .WithMany("MachinesAndCutters")
                        .HasForeignKey("MachineDataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CutterDataModel");

                    b.Navigation("MachineDataModel");
                });

            modelBuilder.Entity("CutterManagement.Core.MachineDataModelPartDataModel", b =>
                {
                    b.HasOne("CutterManagement.Core.MachineDataModel", "MachineDataModel")
                        .WithMany("MachinesAndParts")
                        .HasForeignKey("MachineDataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CutterManagement.Core.PartDataModel", "PartDataModel")
                        .WithMany("MachinesAndParts")
                        .HasForeignKey("PartDataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MachineDataModel");

                    b.Navigation("PartDataModel");
                });

            modelBuilder.Entity("CutterManagement.Core.MachineDataModelUserDataModel", b =>
                {
                    b.HasOne("CutterManagement.Core.MachineDataModel", "MachineDataModel")
                        .WithMany("MachinesAndUsers")
                        .HasForeignKey("MachineDataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CutterManagement.Core.UserDataModel", "UserDataModel")
                        .WithMany("MachinesAndUsers")
                        .HasForeignKey("UserDataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MachineDataModel");

                    b.Navigation("UserDataModel");
                });

            modelBuilder.Entity("CutterManagement.Core.CutterDataModel", b =>
                {
                    b.Navigation("MachinesAndCutters");
                });

            modelBuilder.Entity("CutterManagement.Core.MachineDataModel", b =>
                {
                    b.Navigation("MachinesAndCutters");

                    b.Navigation("MachinesAndParts");

                    b.Navigation("MachinesAndUsers");
                });

            modelBuilder.Entity("CutterManagement.Core.PartDataModel", b =>
                {
                    b.Navigation("MachinesAndParts");
                });

            modelBuilder.Entity("CutterManagement.Core.UserDataModel", b =>
                {
                    b.Navigation("MachinesAndUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
