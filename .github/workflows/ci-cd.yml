name: "Continuous Integration Continuous Delivery"

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  RELEASE_VERSION: ${{ github.ref_name }}

jobs:
  build-and-create-a-release-file:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Dotnet setup
        uses: actions/setup-dotnet@v3
        with:
              dotnet-version: '8.0.x'
  
      - name: Restoring dependencies
        # run: dotnet restore CutterManagementSystem.sln
        run: dotnet restore CutterManagement.UI.Desktop/CutterManagement.UI.Desktop.csproj -r win-x64

      - name: Building solution
        run: dotnet build CutterManagementSystem.sln -c Release --no-restore

      - name: Publishing application
        # run: dotnet publish CutterManagementSystem/CutterManagementSystem.csproj --c Release --self-contained -r win-x64 -p:PublishSingleFile=true --no-build -o ./publish
        run: dotnet publish CutterManagement.UI.Desktop/CutterManagement.UI.Desktop.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true --no-build -o ./CutterManagementSystem-${{ env.RELEASE_VERSION }}

      - name: Zipping the published folder (using powershell)
        shell: pwsh
        # run: Compress-Archive -path "CutterManagement.UI.Desktop/bin/Release/net8.0-windows/win-x64/publish" -DestinationPath "CutterManagementSystem.zip"
        # run: | 
        #   if (Test-Path "publish") 
        #   { Compress-Archive -Path "publish" -DestinationPath "CutterManagementSystem.zip" } 
        #   else { Write-Error "Publish folder not found. Did dotnet publish fail?" }
        run: |
          $exe = Get-ChildItem -Path "CutterManagementSystem-${{ env.RELEASE_VERSION }}" -Filter *.exe | Select-Object -First 1
          if ($exe)
            {
              $zipName = "CutterManagementSystem-$env:RELEASE_VERSION.zip"
              Compress-Archive -Path "CutterManagementSystem-${{ env.RELEASE_VERSION }}" -DestinationPath $zipName 
            } 
          else
            {
              Write-Error "No .exe found in CutterManagementSystem-${{ env.RELEASE_VERSION }} folder."
            }

      - name: Uploading the zipped folder as a release
        uses: softprops/action-gh-release@v1
        with:
          files: CutterManagementSystem-${{ env.RELEASE_VERSION }}.zip
          name: "Cutter-Management-System ${{ env.RELEASE_VERSION }}"
          tag_name: ${{ github.ref_name }}